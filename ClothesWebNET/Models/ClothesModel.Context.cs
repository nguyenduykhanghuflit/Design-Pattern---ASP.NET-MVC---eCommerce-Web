//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClothesWebNET.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CLOTHESEntities : DbContext
    {
        public CLOTHESEntities()
            : base("name=CLOTHESEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AttributeDetail> AttributeDetail { get; set; }
        public virtual DbSet<Attributes> Attributes { get; set; }
        public virtual DbSet<Atrributes> Atrributes { get; set; }
        public virtual DbSet<Bill> Bills { get; set; }
        public virtual DbSet<DetailBIll> DetailBIll { get; set; }
        public virtual DbSet<ImageProduct> ImageProduct { get; set; }
        public virtual DbSet<OrderStatus> OrderStatus { get; set; }
        public virtual DbSet<Permission> Permission { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Types> Types { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<Voucher> Voucher { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<spGetNewProduct_Result> spGetNewProduct()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetNewProduct_Result>("spGetNewProduct");
        }
    
        public virtual ObjectResult<spGetProduct_Result> spGetProduct(Nullable<int> page, Nullable<int> size)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProduct_Result>("spGetProduct", pageParameter, sizeParameter);
        }
    
        public virtual ObjectResult<spGetProductById_Result> spGetProductById(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProductById_Result>("spGetProductById", idParameter);
        }
    
        public virtual ObjectResult<spGetProductByIdProduct_Result> spGetProductByIdProduct(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProductByIdProduct_Result>("spGetProductByIdProduct", idParameter);
        }
    
        public virtual ObjectResult<spGetProductByKeyword_Result> spGetProductByKeyword(string keyword)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProductByKeyword_Result>("spGetProductByKeyword", keywordParameter);
        }
    
        public virtual ObjectResult<spGetProductByType_Result> spGetProductByType(string idType, Nullable<int> page, Nullable<int> size)
        {
            var idTypeParameter = idType != null ?
                new ObjectParameter("idType", idType) :
                new ObjectParameter("idType", typeof(string));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProductByType_Result>("spGetProductByType", idTypeParameter, pageParameter, sizeParameter);
        }
    
        public virtual int spCapNhatSoLuongSanPham(Nullable<int> soLuongSp, string idDetail)
        {
            var soLuongSpParameter = soLuongSp.HasValue ?
                new ObjectParameter("soLuongSp", soLuongSp) :
                new ObjectParameter("soLuongSp", typeof(int));
    
            var idDetailParameter = idDetail != null ?
                new ObjectParameter("idDetail", idDetail) :
                new ObjectParameter("idDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCapNhatSoLuongSanPham", soLuongSpParameter, idDetailParameter);
        }
    
        public virtual int spDeleteProduct(string idProduct)
        {
            var idProductParameter = idProduct != null ?
                new ObjectParameter("idProduct", idProduct) :
                new ObjectParameter("idProduct", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteProduct", idProductParameter);
        }
    
        public virtual ObjectResult<spLaySanPhamBanChay_Result> spLaySanPhamBanChay()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLaySanPhamBanChay_Result>("spLaySanPhamBanChay");
        }
    
        public virtual ObjectResult<spGetHotProduct_Result> spGetHotProduct()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetHotProduct_Result>("spGetHotProduct");
        }
    
        public virtual int spCapNhatTrangThaiDonHang(string idBill, string idStatus)
        {
            var idBillParameter = idBill != null ?
                new ObjectParameter("idBill", idBill) :
                new ObjectParameter("idBill", typeof(string));
    
            var idStatusParameter = idStatus != null ?
                new ObjectParameter("idStatus", idStatus) :
                new ObjectParameter("idStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCapNhatTrangThaiDonHang", idBillParameter, idStatusParameter);
        }
    
        public virtual ObjectResult<spGetProductByTypeId_Result> spGetProductByTypeId(string idType, Nullable<int> page, Nullable<int> size)
        {
            var idTypeParameter = idType != null ?
                new ObjectParameter("idType", idType) :
                new ObjectParameter("idType", typeof(string));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProductByTypeId_Result>("spGetProductByTypeId", idTypeParameter, pageParameter, sizeParameter);
        }
    
        public virtual ObjectResult<spTaoDonHang_Result> spTaoDonHang()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTaoDonHang_Result>("spTaoDonHang");
        }
    
        public virtual int ThemMotLoai(string maLoai, string tenLoai)
        {
            var maLoaiParameter = maLoai != null ?
                new ObjectParameter("maLoai", maLoai) :
                new ObjectParameter("maLoai", typeof(string));
    
            var tenLoaiParameter = tenLoai != null ?
                new ObjectParameter("tenLoai", tenLoai) :
                new ObjectParameter("tenLoai", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ThemMotLoai", maLoaiParameter, tenLoaiParameter);
        }
    
        public virtual int spTestIns(string idBill, string idUser, string customerName, string email, string phone, string address, string province, string district, string ward)
        {
            var idBillParameter = idBill != null ?
                new ObjectParameter("idBill", idBill) :
                new ObjectParameter("idBill", typeof(string));
    
            var idUserParameter = idUser != null ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("customerName", customerName) :
                new ObjectParameter("customerName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("province", province) :
                new ObjectParameter("province", typeof(string));
    
            var districtParameter = district != null ?
                new ObjectParameter("district", district) :
                new ObjectParameter("district", typeof(string));
    
            var wardParameter = ward != null ?
                new ObjectParameter("ward", ward) :
                new ObjectParameter("ward", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTestIns", idBillParameter, idUserParameter, customerNameParameter, emailParameter, phoneParameter, addressParameter, provinceParameter, districtParameter, wardParameter);
        }
    
        public virtual ObjectResult<spThongKeDonHangHomNay_Result> spThongKeDonHangHomNay()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spThongKeDonHangHomNay_Result>("spThongKeDonHangHomNay");
        }
    
        public virtual ObjectResult<spThongKeDonHangVaSoTienUser_Result> spThongKeDonHangVaSoTienUser(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spThongKeDonHangVaSoTienUser_Result>("spThongKeDonHangVaSoTienUser", userIDParameter);
        }
    
        public virtual ObjectResult<ThongKeDonHangTheoThoiGian_Result> ThongKeDonHangTheoThoiGian(Nullable<System.DateTime> tuNgay, Nullable<System.DateTime> denNgay)
        {
            var tuNgayParameter = tuNgay.HasValue ?
                new ObjectParameter("tuNgay", tuNgay) :
                new ObjectParameter("tuNgay", typeof(System.DateTime));
    
            var denNgayParameter = denNgay.HasValue ?
                new ObjectParameter("denNgay", denNgay) :
                new ObjectParameter("denNgay", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ThongKeDonHangTheoThoiGian_Result>("ThongKeDonHangTheoThoiGian", tuNgayParameter, denNgayParameter);
        }
    }
}
